import {
    CeramicApi,
    Doctype,
    DoctypeConstructor,
    DoctypeStatic,
    DocOpts,
    Context,
    CeramicCommit,
    UnsignedCommit,
    DocMetadata,
    GenesisCommit,
} from '@ceramicnetwork/common';
import {AuthProvider, LinkProof} from "@ceramicnetwork/blockchain-utils-linking";
import { CommitID, DocID, DocRef } from "@ceramicnetwork/docid";
import { AccountID } from "caip";
import { DID } from "dids";


/**
 * Caip10Link parameters
 */
export interface Caip10LinkParams {
    metadata?: DocMetadata
    content?: Record<string, unknown>;

    [index: string]: any // allow arbitrary properties
}

const throwReadOnlyError = (): Promise<void> => {
    throw new Error('Historical document commits cannot be modified. Load the document without specifying a commit to make updates.')
}

/**
 * Caip10Link doctype implementation
 * todo clean up order of methods
 */
@DoctypeStatic<DoctypeConstructor<Caip10LinkDoctype>>()
export class Caip10LinkDoctype extends Doctype {

    static DOCTYPE_NAME = 'caip10-link'
    static DOCTYPE_ID = 1

    /**
     * Creates a Caip10Link for the given CAIP10 address. Initially created without a link to any DID,
     *   use 'setDid' to create the public link between the given CAIP10 account and a DID.
     * @param ceramic - Instance of CeramicAPI used to communicate with the Ceramic network
     * @param accountId - Blockchain account id in CAIP10 format.
     * @param opts - Additional options.
     */
    static async fromAccount(ceramic: CeramicApi,
                             accountId: string | AccountID,
                             opts: DocOpts = {}): Promise<Caip10LinkDoctype> {
        const normalizedAccountId = new AccountID(accountId)
        const genesisCommit = Caip10LinkDoctype._makeGenesis(normalizedAccountId)
        return Caip10LinkDoctype.fromGenesis(ceramic, genesisCommit, opts)
    }

    /**
     * Create Caip10Link from the genesis commit
     * @param ceramic - Instance of CeramicAPI used to communicate with the Ceramic network
     * @param genesisCommit - Genesis commit (first commit in document log)
     * @param opts - Additional options
     */
    static async fromGenesis(ceramic: CeramicApi,
                             genesisCommit: GenesisCommit,
                             opts: DocOpts = {}): Promise<Caip10LinkDoctype> {
        return ceramic.createDocumentFromGenesis<Caip10LinkDoctype>(
            Caip10LinkDoctype.DOCTYPE_NAME, genesisCommit, opts)
    }

    /**
     * Given a DID and an AuthProvider which includes support for the CAIP2 chainid of
     * the CAIP10 address that this Caip10Link represents, updates this Caip10Link to
     * create a verifiable link from the CAIP10 address to the DID.
     * @param did - The DID being linked to the CAIP10 address that this Caip10Link object represents.
     *   If the 'did' provided is an instance of the DID type, the DID must already be authenticated
     *   so that the did string it represents is available.
     * @param authProvider - AuthProvider instance from the "@ceramicnetwork/blockchain-utils-linking" package.
     *   Must include support for the blockchain that the CAIP10 address associated with this Caip10Link lives on.
     * @param opts - Additional options
     */
    async setDid(did: string | DID, authProvider: AuthProvider, opts: DocOpts = {}): Promise<void> {
        const didStr: string = typeof did == "string" ? did : did.id
        const linkProof = await authProvider.createLink(didStr)
        return this.setDidProof(linkProof, opts)
    }

    /**
     * Given a LinkProof proving the relationship between a DID and a CAIP10 account,
     * updates this CAIP10Link to contain the proof, thereby making the link from the
     * CAIP10 address to the DID publicly discoverable.
     * @param proof - LinkProof as generated by the "@ceramicnetwork/blockchain-utils-linking" package
     * @param opts - Additional options
     */
    async setDidProof(proof: LinkProof, opts: DocOpts = {}): Promise<void> {
        const commit = this._makeCommit(proof)
        const updated = await this.context.api.applyCommit(this.id, commit, opts)
        this.state$.next(updated.state);
    }

    /**
     * Loads a Caip10Link from a given DocID
     * @param ceramic - Instance of CeramicAPI used to communicate with the Ceramic network
     * @param docId - DocID to load.  Must correspond to a Caip10Link doctype
     * @param opts - Additional options
     */
    static async load(ceramic: CeramicApi, docId: DocID | CommitID | string, opts: DocOpts = {}): Promise<Caip10LinkDoctype> {
        const docRef = DocRef.from(docId)
        if (docRef.type != Caip10LinkDoctype.DOCTYPE_ID) {
            throw new Error(`DocID ${docRef.toString()} does not refer to a '${Caip10LinkDoctype.DOCTYPE_NAME}' doctype, but to a ${docRef.typeName}`)
        }

        return ceramic.loadDocument<Caip10LinkDoctype>(docRef, opts)
    }

    /**
     * Makes the genesis commit from a given CAIP-10 AccountID
     * @param accountId
     * @private
     * TODO make public
     */
    private static _makeGenesis(accountId: AccountID): GenesisCommit {
        return { header: { controllers: [accountId.toString()],
                           family: `caip10-${accountId.chainId.toString()}` } }

    }

    /**
     * Makes the commit to update linked CAIP10 account from a given LinkProof
     * @param proof
     * @private
     * TODO make public
     */
    private _makeCommit(proof: LinkProof): UnsignedCommit {
        return { data: proof, prev: this.tip, id: this.state$.id.cid }
    }

    /**
     * Makes this document read-only. After this has been called any future attempts to call
     * mutation methods on the instance will throw.
     */
    makeReadOnly() {
        this.change = throwReadOnlyError
        this.setDidProof = throwReadOnlyError
        this.setDid = throwReadOnlyError
    }

    /**
     * Changes Caip10Link instance
     * @param params - Change parameters
     * @param opts - Initialization options
     * TODO remove this
     */
    async change(params: Caip10LinkParams, opts?: DocOpts): Promise<void> {
        const { content, metadata } = params

        const updateCommit = await Caip10LinkDoctype._makeCommit(this, content, metadata?.schema)
        const updated = await this.context.api.applyCommit(this.id.toString(), updateCommit, opts)
        this.state$.next(updated.state);
    }

    /**
     * Creates Caip10Link doctype
     * @param params - Create parameters
     * @param context - Ceramic context
     * @param opts - Initialization options
     * TODO remove this
     */
    static async create(params: Caip10LinkParams, context: Context, opts?: DocOpts): Promise<Caip10LinkDoctype> {
        const { content, metadata } = params

        const commit = await Caip10LinkDoctype.makeGenesis({ content, metadata }, context)
        return context.api.createDocumentFromGenesis(Caip10LinkDoctype.DOCTYPE_NAME, commit, opts)
    }

    /**
     * Creates genesis commit
     * @param params - Create parameters
     * @param context
     * TODO remove this
     */
    static async makeGenesis(params: Record<string, any>, context: Context): Promise<CeramicCommit> {
        const { content, metadata } = params

        if (content) {
            throw new Error('Account link genesis cannot have content')
        }
        if (!metadata) {
            throw new Error('Metadata must be specified')
        }
        if (!(metadata.controllers && metadata.controllers.length === 1)) {
            throw new Error('Exactly one controller must be specified')
        }

        const [, linkedChainId] = metadata.controllers[0].split('@');
        if (!linkedChainId) {
            throw new Error('Chain ID must be specified according to CAIP-10')
        }
        // Add family here to enable easier indexing
        return { header: { controllers: metadata.controllers, family: `caip10-${linkedChainId}` } }
    }

    /**
     * Creates change commit
     * @param doctype - Caip10Link doctype instance
     * @param newContent - Change content
     * @param newSchema - Change schema
     * @private
     * TODO remove this
     */
    static async _makeCommit (doctype: Caip10LinkDoctype, newContent: any, newSchema: string = null): Promise<UnsignedCommit> {
        if (newSchema) {
            throw new Error('Schema not allowed on caip10-link doctype')
        }
        if (newContent == null) {
            throw new Error('Proof must be given in doctype')
        }
        return { data: newContent, prev: doctype.tip, id: doctype.state.log[0].cid }
    }
}
