# TODO: Remove ECR and build event steps once the new CD flow is implemented
name: Publish Docker image and docs

on:
  repository_dispatch:
    types: [test-success]
  workflow_dispatch: # manually triggered
    inputs:
      branch:
        description: 'Branch to build'
        required: false
        default: ''
      sha:
        description: 'Commit hash'
        required: false
        default: ''

env:
  # Dagger
  DAGGER_PLAN: cue.mod/pkg/github.com/3box/pipeline-tools/ci/ceramic.cue
  DAGGER_VERSION: "0.2.21"
  DAGGER_LOG_FORMAT: "plain"
  PIPELINE_TOOLS_VER: "0.1.3"
  # Secrets
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  # Miscellaneous
  RUN_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  STATUS_URL: "https://api.github.com/repos/ceramicnetwork/js-ceramic/statuses/${{ github.event.client_payload.sha }}"
  BRANCH: "develop"
  # TODO:
  # ${{ github.event.client_payload.branch }}
  SHA: ${{ github.event.client_payload.sha }}

jobs:
  image:
    name: Verify and publish Docker image
    runs-on: ubuntu-latest
    steps:
      -
        name: Set branch from inputs
        if: ${{ env.BRANCH == '' }}
        run: echo "BRANCH=${{ github.event.inputs.branch }}" >> $GITHUB_ENV
      -
        name: Set SHA from inputs
        if: ${{ env.SHA == '' }}
        run: echo "SHA=${{ github.event.inputs.sha }}" >> $GITHUB_ENV
      -
        name: Set publish flag
        if: ${{ env.BRANCH == 'main' || env.BRANCH == 'release-candidate' || env.BRANCH == 'develop' }}
        run: echo "PUBLISH=true" >> $GITHUB_ENV
      -
        name: Set commit status "pending"
        run: |
          res=$(curl \
            -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ env.GH_TOKEN }}" \
            ${{ env.STATUS_URL }} \
            -d '{"state":"pending","target_url":"${{ env.RUN_URL }}","description":"Image verification started","context":"ci/image: verify"}') || exit 1
          echo $res
          if [[ $res != *"pending"* ]]; then
            exit 1
          fi
      -
        name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH }}
      -
        name: Set sha tag
        run: |
          SHA_TAG=$(echo ${{ env.SHA }} | head -c 12)
          echo "SHA_TAG=$SHA_TAG" >> $GITHUB_ENV
      -
        name: Set main branch tag
        if: ${{ env.BRANCH == 'main' }}
        run: |
          echo "ENV_TAG=prod" >> $GITHUB_ENV
          echo "EVENT_WEBHOOK_URL=${{ secrets.EVENT_WEBHOOK_FIRE }}" >> $GITHUB_ENV
      -
        name: Set rc branch tag
        if: ${{ env.BRANCH == 'release-candidate' }}
        run: |
          echo "ENV_TAG=tnet" >> $GITHUB_ENV
          echo "EVENT_WEBHOOK_URL=${{ secrets.EVENT_WEBHOOK_CLAY }}" >> $GITHUB_ENV
      -
        name: Set develop branch tag
        if: ${{ env.BRANCH == 'develop' || env.ENV_TAG == '' }}
        run: |
          echo "ENV_TAG=dev" >> $GITHUB_ENV
          echo "EVENT_WEBHOOK_URL=${{ secrets.EVENT_WEBHOOK_DEV }}" >> $GITHUB_ENV
      -
        name: Install Dagger
        uses: dagger/dagger-for-github@v3
        with:
          install-only: true
      -
        name: Setup Dagger
        run: |
            dagger project init
            dagger project update
            dagger project update "github.com/3box/pipeline-tools@develop"

            AWS_SCRIPTS=cue.mod/pkg/universe.dagger.io/aws/_scripts
            AWS_INSTALL="https://raw.githubusercontent.com/dagger/dagger/v${{ env.DAGGER_VERSION }}/pkg/universe.dagger.io/aws/_scripts/install.sh"
            mkdir -p $AWS_SCRIPTS
            curl -fsSL $AWS_INSTALL > $AWS_SCRIPTS/install.sh
            chmod +x $AWS_SCRIPTS/install.sh
      -
        name: Verify Docker image
        run: dagger do verify -p ${{ env.DAGGER_PLAN }}
      -
        name: Push Docker image
        if: ${{ env.PUBLISH == 'true' }}
        run: dagger do push -w "actions:push:\"${{ env.AWS_REGION }}\":\"${{ env.ENV_TAG }}\":_" -p ${{ env.DAGGER_PLAN }}
      -
        name: Post deployment event
        if: ${{ env.PUBLISH == 'true' }}
        run: dagger do -l error queue -w "actions:queue:\"${{ env.AWS_REGION }}\":\"${{ env.ENV_TAG }}\":_" -p ${{ env.DAGGER_PLAN }}
      -
        name: Login to Amazon ECR
        id: login-ecr
        if: ${{ env.PUBLISH == 'true' }}
        uses: aws-actions/amazon-ecr-login@v1
#      -
#        name: Publish build event
#        if: ${{ env.PUBLISH == 'true' }}
#        run: |
#          res=$(docker run --rm curlimages/curl curl -X POST ${{ env.EVENT_WEBHOOK_URL }} \
#            -H "Content-Type: application/json" \
#            --user ${{ env.AWS_ACCESS_KEY_ID }}:${{ env.AWS_SECRET_ACCESS_KEY }} \
#            --aws-sigv4 "aws:amz:${{ env.AWS_REGION }}:execute-api" \
#            -d '
#              {
#                "event_type": "new_ceramic_image",
#                "client_payload":
#                {
#                  "env_tag": "${{ env.ENV_TAG }}",
#                  "sha_tag": "${{ env.SHA }}",
#                  "ecr_repo": "${{ steps.login-ecr.outputs.registry }}",
#                  "attempt": "${{ github.run_attempt }}"
#                }
#              }
#            ') || exit 1
#          echo $res
#          if [[ $res != *"Forwarded event"* ]]; then
#            exit 1
#          fi
      -
        name: Set commit status "success"
        run: |
          res=$(curl \
            -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ env.GH_TOKEN }}" \
            ${{ env.STATUS_URL }} \
            -d '{"state":"success","target_url":"${{ env.RUN_URL }}","description":"Image verification successful","context":"ci/image: verify"}') || exit 1
          echo $res
          if [[ $res != *"success"* ]]; then
            exit 1
          fi
      -
        name: Set commit status "failure"
        if: ${{ failure() }}
        run: |
          res=$(curl \
            -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ env.GH_TOKEN }}" \
            ${{ env.STATUS_URL }} \
            -d '{"state":"failure","target_url":"${{ env.RUN_URL }}","description":"Image verification failed","context":"ci/image: verify"}') || exit 1
          echo $res
          if [[ $res != *"failure"* ]]; then
            exit 1
          fi

  docs:
    name: Publish docs
    runs-on: ubuntu-latest
    if: ${{ github.event.client_payload.branch == 'main' || github.event.inputs.branch == 'main' }}
    needs: image
    steps:
      -
        name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: main
      -
        name: Publish docs
        uses: dagger/dagger-for-github@v3
        with:
          version: ${{ env.DAGGER_VERSION }}
          cmds: |
            project init
            project update
            project update "github.com/3box/pipeline-tools@v${{ env.PIPELINE_TOOLS_VER }}"
            do docs -p ${{ env.DAGGER_PLAN }}
