name: Publish npm packages

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of publish (one of: rc, main, both, hotfix, rc-hotfix)'
        required: true
        default: 'rc'
      force:
        description: 'Force publish'
        required: true
        default: 'false'
      desc:
        description: 'Release description'
        required: true
        default: ''

jobs:
  publish_main:
    runs-on: ubuntu-latest
    steps:
      -
        name: Setup environment
        id: set-vars
        run: |
          PUBLISH_ARGS=""
          if [[ "${{ github.event.inputs.release_type }}" == "both" || "${{ github.event.inputs.release_type }}" == "main" ]]; then
            echo "::set-output name=main::true"
            PUBLISH_ARGS="$PUBLISH_ARGS --conventional-graduate"
          elif [[ "${{ github.event.inputs.release_type }}" == "hotfix" ]]; then
            echo "::set-output name=main::true"
            echo "::set-output name=hotfix::true"
          fi
          if [[ "${{ github.event.inputs.force }}" == "true" ]]; then
            PUBLISH_ARGS="$PUBLISH_ARGS --force-publish"
          fi
          if [[ -n $PUBLISH_ARGS ]]; then
            echo "::set-output name=publishArgs::-- $PUBLISH_ARGS"
          fi
      -
        name: Setup Node
        if: ${{ steps.set-vars.outputs.main == 'true' }}
        uses: actions/setup-node@v1
        with:
          node-version: 14
      -
        name: Checkout `main` branch
        if: ${{ steps.set-vars.outputs.main == 'true' }}
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          ref: main
          fetch-depth: 0
      -
        name: Merge `release-candidate` -> `main`
        if: ${{ steps.set-vars.outputs.main == 'true' && steps.set-vars.outputs.hotfix != 'true' }}
        run: |
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git config user.name ${{ github.actor }}
          git fetch origin release-candidate
          git merge origin/release-candidate
      -
        name: Initialize and build code
        if: ${{ steps.set-vars.outputs.main == 'true' }}
        run: |
          npm set unsafe-perm true
          npm ci && npm run build
      -
        name: Publish packages to NPM
        if: ${{ steps.set-vars.outputs.main == 'true' }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          PUBLISH_ARGS: ${{ steps.set-vars.outputs.publishArgs }}
        run: |
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git config user.name ${{ github.actor }}
          npm config set //registry.npmjs.org/:_authToken $NODE_AUTH_TOKEN
          npm run publish:latest $PUBLISH_ARGS
      -
        name: Update and push code to `release-candidate` and `develop`
        if: ${{ steps.set-vars.outputs.main == 'true' }}
        run: |
          git checkout -B release-candidate refs/remotes/origin/release-candidate
          git merge origin/main
          git push
          git checkout -B develop refs/remotes/origin/develop
          git merge origin/main
          git push
      -
        name: Send Discord notification
        if: ${{ steps.set-vars.outputs.main == 'true' }}
        run: |
          # Prepare notification body
          echo '{"embeds":[{"title":"**Release Published**","description":"' > embed.json
          echo '```' >> embed.json
          git log -2 --pretty=%B >> embed.json
          echo '```","color":3581519}]}' >> embed.json
          sed -i '3,6d' embed.json
          sed -i '3 s/\ -/-/' embed.json
          sed -i '4,$ s/\-/\\n-/' embed.json
          sed -i '2i ${{ github.event.inputs.desc }}' embed.json

          # Send notification
          res=$(curl -X POST ${{ secrets.DISCORD_RELEASE_WEBHOOK }} -H "Content-Type: application/json" -d @embed.json) || exit 1

  publish_rc:
    runs-on: ubuntu-latest
    needs: publish_main
    steps:
      -
        name: Setup environment
        id: set-vars
        run: |
          PUBLISH_ARGS=""
          if [[ "${{ github.event.inputs.release_type }}" == "both" || "${{ github.event.inputs.release_type }}" == "rc" ]]; then
            echo "::set-output name=rc::true"
            PUBLISH_ARGS="$PUBLISH_ARGS --conventional-prerelease"
          elif [[ "${{ github.event.inputs.release_type }}" == "rc-hotfix" ]]; then
            echo "::set-output name=rc::true"
            echo "::set-output name=hotfix::true"
          fi
          if [[ "${{ github.event.inputs.force }}" == "true" ]]; then
            PUBLISH_ARGS="$PUBLISH_ARGS --force-publish"
          fi
          if [[ -n $PUBLISH_ARGS ]]; then
            echo "::set-output name=publishArgs::-- $PUBLISH_ARGS"
          fi
      -
        name: Setup Node
        if: ${{ steps.set-vars.outputs.rc == 'true' }}
        uses: actions/setup-node@v1
        with:
          node-version: 14
      -
        name: Checkout `release-candidate` branch
        if: ${{ steps.set-vars.outputs.rc == 'true' }}
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          ref: release-candidate
      -
        name: Merge `develop` -> `release-candidate`
        if: ${{ steps.set-vars.outputs.rc == 'true' && steps.set-vars.outputs.hotfix != 'true' }}
        run: |
          git fetch origin develop
          git merge origin/develop
      -
        name: Initialize and build code
        if: ${{ steps.set-vars.outputs.rc == 'true' }}
        run: |
          npm set unsafe-perm true
          npm ci && npm run build
      -
        name: Publish packages to NPM
        if: ${{ steps.set-vars.outputs.rc == 'true' }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          PUBLISH_ARGS: ${{ steps.set-vars.outputs.publishArgs }}
        run: |
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git config user.name ${{ github.actor }}
          npm config set //registry.npmjs.org/:_authToken $NODE_AUTH_TOKEN
          npm run publish:release-candidate $PUBLISH_ARGS
      -
        name: Update and push code to `develop`
        if: ${{ steps.set-vars.outputs.rc == 'true' }}
        run: |
          git checkout -B develop refs/remotes/origin/develop
          git merge origin/release-candidate
          git push
      -
        name: Send Discord notification
        if: ${{ steps.set-vars.outputs.rc == 'true' }}
        run: |
          # Prepare notification body
          echo '{"embeds":[{"title":"**Release Candidate Published**","description":"' > embed.json
          echo '```' >> embed.json
          git log -1 --pretty=%B >> embed.json
          echo '```","color":3581519}]}' >> embed.json
          sed -i '3,4d' embed.json
          sed -i '3 s/\ -/-/' embed.json
          sed -i '4,$ s/\-/\\n-/' embed.json
          sed -i '2i ${{ github.event.inputs.desc }}' embed.json

          # Send notification
          res=$(curl -X POST ${{ secrets.DISCORD_RELEASE_WEBHOOK }} -H "Content-Type: application/json" -d @embed.json) || exit 1
