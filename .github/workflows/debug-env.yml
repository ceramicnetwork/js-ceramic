name: Deploy debug image to dev

on:
  workflow_dispatch:

jobs:
  build_debug_images:
    name: Build and push debug images
    runs-on: ubuntu-latest
    steps:
      -
        name: Check out the repo
        uses: actions/checkout@v2
      -
        name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      -
        name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      -
        name: Set environment variables
        id: set-vars
        run: |
          SHA_TAG=$(git rev-parse --short=12 "${{ github.sha }}")
          echo "::set-output name=SHA_TAG::$SHA_TAG"
      -
        name: Build and push Ceramic image to ECR
        uses: whoan/docker-build-with-cache-action@v5
        with:
          registry: ${{ steps.login-ecr.outputs.registry }}
          image_name: ceramic-debug/js-ceramic
          image_tag: ${{ steps.set-vars.outputs.SHA_TAG }},debug,latest
          dockerfile: Dockerfile.daemon
      -
        name: Build and push IPFS image to ECR
        uses: whoan/docker-build-with-cache-action@v5
        with:
          registry: ${{ steps.login-ecr.outputs.registry }}
          image_name: ceramic-debug/js-ipfs
          image_tag: ${{ steps.set-vars.outputs.SHA_TAG }},debug,latest
          dockerfile: Dockerfile.ipfs-daemon

  deploy_to_infra:
    name: Deploy debug images to dev-unstable
    runs-on: ubuntu-latest
    needs: build_debug_images
    strategy:
      matrix:
        include:
          -
            instance: gateway
            image_id: "ceramic-debug/js-ipfs"
            cluster_suffix: "-ex"
            service_suffix: "-ex-ipfs-gw"
          -
            instance: gateway
            image_id: "ceramic-debug/js-ceramic"
            cluster_suffix: "-ex"
            service_suffix: "-ex-gateway"
          -
            instance: public-node
            image_id: "ceramic-debug/js-ipfs"
            cluster_suffix: "-ex"
            service_suffix: "-ex-ipfs-nd"
          -
            instance: public-node
            image_id: "ceramic-debug/js-ceramic"
            cluster_suffix: "-ex"
            service_suffix: "-ex-node"
          -
            instance: private-node
            image_id: "ceramic-debug/js-ipfs"
            cluster_suffix: ""
            service_suffix: "-ipfs-nd"
          -
            instance: private-node
            image_id: "ceramic-debug/js-ceramic"
            cluster_suffix: ""
            service_suffix: "-node"
    steps:
      -
        name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      -
        name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      -
        name: Set ECS task vars
        id: ecs-vars
        run: |
          echo "::set-output name=ECS_CLUSTER::ceramic-dev${{ matrix.cluster_suffix }}"
          echo "::set-output name=ECS_SERVICE::ceramic-dev${{ matrix.service_suffix }}"
      -
        name: Update ECS task
        uses: silinternational/ecs-deploy@master
        with:
          aws_access_key_cmd: "--aws-access-key"
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key_cmd: "--aws-secret-key"
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          cluster_cmd: "--cluster"
          cluster: ${{ steps.ecs-vars.outputs.ECS_CLUSTER }}
          image_cmd: "--image"
          image: "${{ steps.login-ecr.outputs.registry }}/${{ matrix.image_id }}"
          region_cmd: "--region"
          region: ${{ secrets.AWS_DEFAULT_REGION }}
          service_name_cmd: "--service-name"
          service_name: ${{ steps.ecs-vars.outputs.ECS_SERVICE }}
          timeout_cmd: "--timeout"
          timeout: "360"
          verbose: "--verbose"
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Restart running tasks
        run: |
          cd .github/workflows/scripts
          chmod +x stopTasks.sh
          ./stopTasks.sh ${{ steps.ecs-vars.outputs.ECS_CLUSTER }} ${{ steps.ecs-vars.outputs.ECS_SERVICE }}
