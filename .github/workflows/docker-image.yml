name: Publish images to Docker Hub

on:
  push:
    branches: [ develop, feat/ci-docker ]
  workflow_dispatch: # manually triggered

jobs:
  push_js_ceramic:
    name: Build and push
    runs-on: ubuntu-latest
    env:
      BRANCH: ${GITHUB_REF##*/}
      SHA_TAG: ${{ github.sha }}
    steps:
      -
        name: Check out the repo
        uses: actions/checkout@v2
      -
        name: Set env tag
        if: ${{ env.BRANCH == 'master' }}
        run: echo "ENV_TAG=latest" >> $GITHUB_ENV
      -
        name: Set env tag
        if: ${{ env.BRANCH == 'release-candidate' }}
        run: echo "ENV_TAG=tnet" >> $GITHUB_ENV
      -
        name: Set env tag
        if: ${{ env.BRANCH == 'develop' }}
        run: echo "ENV_TAG=dev" >> $GITHUB_ENV
      -
        name: Set env tag (default)
        if: ${{ env.ENV_TAG == '' }}
        run: echo "ENV_TAG=dev" >> $GITHUB_ENV
      - 
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push js-ceramic (daemon)
        id: js_ceramic
        uses: docker/build-push-action@v2
        with:
          push: true
          file: ./Dockerfile.daemon
          tags: |
            @ceramicnetwork/js-ceramic:${{ env.ENV_TAG }}
            @ceramicnetwork/js-ceramic:${{ env.SHA_TAG }}
            @ceramicnetwork/js-ceramic:${{ env.BRANCH }}
      -
        name: Build and push ipfs-daemon
        id: ipfs_daemon
        uses: docker/build-push-action@v2
        with:
          push: true
          file: ./Dockerfile.ipfs-daemon
          tags: |
            @ceramicnetwork/ipfs-daemon:${{ env.ENV_TAG }}
            @ceramicnetwork/ipfs-daemon:${{ env.SHA_TAG }}
            @ceramicnetwork/ipfs-daemon:${{ env.BRANCH }}
      -
        name: Image digest
        run: |
          echo ${{ steps.js_ceramic.outputs.digest }}
          echo ${{ steps.ipfs_daemon.outputs.digest }}
